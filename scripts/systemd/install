#!/bin/bash
set -e
set -o pipefail

cd $(dirname $0)

CONFIG_DIR=${XDG_CONFIG_HOME:-~/.config}/exodus-gw-dev

use_sidecar(){
  # are we on a network where this can be used?
  host images.paas.redhat.com &>/dev/null
}

use_fakefront(){
  # can exodus-lambda sources be found as a sibling to this repo?
  test -f ../../../exodus-lambda/tox.ini
}

check_prereqs(){
  failed=0
  for cmd in podman sscg tox host hostname postgres; do
    if ! test -x /usr/bin/$cmd; then
      failed=1
      echo "ERROR: not available: $cmd (try: 'sudo dnf install /usr/bin/$cmd')" 1>&2
    fi
  done

  if test $failed -eq 1; then
    echo "ERROR: missing packages. Install packages listed above, then try again." 1>&2
    exit 50
  fi
}

enable_units(){
  systemctl --quiet --user enable $PWD/exodus-gw.target

  systemctl --user enable $PWD/exodus-gw-db.service
  systemctl --user enable $PWD/exodus-gw-localstack.service
  systemctl --user enable $PWD/exodus-gw-uvicorn.service
  systemctl --user enable $PWD/exodus-gw-worker.service
  systemctl --user enable $PWD/exodus-gw-cert.service

  if use_sidecar; then
    systemctl --user enable $PWD/exodus-gw-sidecar.service
  else
    echo "WARNING: sidecar image appears to be unavailable, cannot use HTTPS." 1>&2
  fi

  if use_fakefront; then
    systemctl --user enable $PWD/exodus-fakefront.service
  else
    echo "WARNING: exodus-lambda sources not found, fakefront was not enabled." 1>&2
  fi
}

create_env_file(){
  # Create a .env file read by the rest of the units via EnvironmentFile.
  # The main reason we need to do this is to ensure an accurate source path,
  # since not every dev may clone the repo to the same location.
  if ! test -f ~/.config/exodus-gw-dev/.env; then
    mkdir -p ~/.config/exodus-gw-dev
    cat >~/.config/exodus-gw-dev/.env <<END
# Environment for exodus-gw development services.
#
# Arbitrary environment variables can be set here.
# The most commonly used are listed here as examples.

# Path to git repo
EXODUS_GW_SRC_PATH=$(realpath -L ../..)

# Port numbers for various things. You might have to change these
# if you're having a clash with other services.
#EXODUS_GW_DB_SERVICE_PORT=3355
#EXODUS_GW_LOCALSTACK_PORT=3377
#EXODUS_GW_HTTP_PORT=8000
#EXODUS_GW_HTTPS_PORT=8010

# You'll have to change these too if you change the localstack port.
# For exodus-gw:
#EXODUS_GW_S3_ENDPOINT_URL=https://localhost:3377
# For fakefront:
#EXODUS_AWS_ENDPOINT_URL=https://localhost:3377

# Dummy private key, enabling CDN redirect API.
EXODUS_GW_CDN_PRIVATE_KEY_TEST="-----BEGIN RSA PRIVATE KEY-----
MIICWgIBAAKBgEku7kJh8jDweJCO73COmlSKlcw/A55kWLt245m0sQzx5P9eF3jG
NiDxYb9WZShyeckoS9B6i8+zX6g8OcnKmLXuavHyJpQXmE01ZpizCJiTcn7ihw/n
tPvzc+Ty1Haea30RPUvRUuhaqV+RjXSzCnTRkNiqH6YXLYbUIgfXN1rXAgMBAAEC
gYAkNCBQHK44ga3TLbLMBu/YJNroOMAsik3PJ4h+0IHJ+pyjrEOGTuAWOfN2OWI/
uSoAVnvy/bzOmlkXG/wmlKAo0QCDhieWM2Ss+rIkBjmSX8yO+K41Mu+BwOLS/Ynb
ch119R8L+TBS0pGt2tDBr5c+DJfDqcS+lhRJgoTenWkZ0QJBAIsxHUNyZV81mTP2
V5J0kViF/dtRDzQTjTvumWHcDj5R3VuQMrxQJS+8GTYO+6xP+W+oZIIY0TVUhuHg
WUb8q08CQQCGmQ/LnljQim73iSs6ew5VcIVghcMqhlXhZ6+LR0g7A0T2gNTjrGsS
UY9gdLOIpNFfWeUtWnTf7g3YUp41VNX5AkAJIFJD3tdIs9H0tz0srBnvjPGFFL6D
cpi7CjziTrRcX6+81iqNcE/P3mxkv/y+Yov/RzI32Xq2HXGuk7Am2GA/AkBO65J6
ZsdWx8TW+aPSL3MxH7/k36mW1pumheBFPy+YAou+Kb4qHN/PJul1uhfG6DUnvpMF
K8PZxUBy9cZ0KOEpAkA1b7cZpW40ZowMvAH6sF+7Ok1NFd+08AMXLiSJ6z7Sk29s
UrfAc2T6ZnfNC4qLIaDyo87CzVG/wk1Upr21z0YD
-----END RSA PRIVATE KEY-----"

# Disable migrations during development
#EXODUS_GW_DB_MIGRATION_MODE=model

# Drop and recreate tables on restart
#EXODUS_GW_DB_RESET=true
END
  fi

}

make_cert(){
  systemctl --user start exodus-gw-cert.service
}

summarize(){
  cat <<END
exodus-gw units are installed!

Suggested commands:

  # Start development servers
  systemctl --user start exodus-gw.target

  # Observe server logs
  journalctl --user '--unit=exodus-*' -f

  # Verify http server is working
  curl http://localhost:8000/healthcheck

  # Verify background worker is running
  curl http://localhost:8000/healthcheck-worker

  # Create a test bucket in localstack
  aws --endpoint-url=http://localhost:3377 s3api create-bucket --bucket test

  # Install CA certificate to system bundle
  sudo cp $CONFIG_DIR/ca.crt /etc/pki/ca-trust/source/anchors/exodus-gw-dev.crt
  sudo update-ca-trust
END

  if use_sidecar; then
    cat <<END

  # Verify https server is working
  curl https://localhost:8010/healthcheck
END
  fi

  if use_fakefront; then
    cat <<END

  # Verify fakefront is working
  curl -I http://localhost:8049/_/cookie/test
END
  fi
}

run(){
  check_prereqs
  create_env_file
  enable_units
  make_cert
  summarize
}

run
